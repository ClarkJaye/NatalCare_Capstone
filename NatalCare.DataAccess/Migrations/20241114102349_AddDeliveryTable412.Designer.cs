// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatalCare.DataAccess.data;

#nullable disable

namespace NatalCare.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241114102349_AddDeliveryTable412")]
    partial class AddDeliveryTable412
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "223e5845-f58c-493f-b6b4-46ff3b18a332",
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("CategoryId");

                    b.HasIndex("StatusCode");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Masters",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4973),
                            StatusCode = "AC"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Patient Management",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4974),
                            StatusCode = "AC"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Billing & Payement",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4975),
                            StatusCode = "AC"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Reports",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4976),
                            StatusCode = "AC"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Maintenance",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4976),
                            StatusCode = "AC"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Delivery", b =>
                {
                    b.Property<string>("CaseNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DLCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("DLUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<DateOnly?>("Date_Admitted")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Date_Discharged")
                        .HasColumnType("date");

                    b.Property<int?>("DeliveryStatusID")
                        .HasColumnType("int");

                    b.Property<string>("NewbornID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrenatalID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<TimeOnly?>("Time_Admitted")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WardNumber")
                        .HasColumnType("int");

                    b.HasKey("CaseNo");

                    b.HasIndex("DLCreatedBy");

                    b.HasIndex("DLUpdatedBy");

                    b.HasIndex("DeliveryStatusID");

                    b.HasIndex("NewbornID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrenatalID");

                    b.HasIndex("StatusCode");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.DeliveryStatus", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Monitoring"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "In-Labor"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Pospartum"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Discharged"
                        },
                        new
                        {
                            Id = 5,
                            StatusName = "Referred"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.FamilyPlanning", b =>
                {
                    b.Property<string>("CaseNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageMonthlyIncome")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("FPCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("FPUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("MethodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoOfLivingChild")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("PlanToHaveMoreChildren")
                        .HasColumnType("bit");

                    b.Property<string>("SpouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseNo");

                    b.HasIndex("FPCreatedBy");

                    b.HasIndex("FPUpdatedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("StatusCode");

                    b.ToTable("FamilyPlanning");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.ItemPayments", b =>
                {
                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemID", "PaymentID");

                    b.HasIndex("PaymentID");

                    b.ToTable("ItemPayments");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Items", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ItemID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Modules", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ModuleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("ModuleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusCode");

                    b.ToTable("Module");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            CategoryId = 1,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4991),
                            ModuleTitle = "Dashboard",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 2,
                            CategoryId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4993),
                            ModuleTitle = "Patient Records",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 3,
                            CategoryId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4994),
                            ModuleTitle = "Newborn Records",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 4,
                            CategoryId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4995),
                            ModuleTitle = "Admission / In-Patient",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 5,
                            CategoryId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4995),
                            ModuleTitle = "Out-Patient (OPD)",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 6,
                            CategoryId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4996),
                            ModuleTitle = "Refferal Patient",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 7,
                            CategoryId = 3,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4997),
                            ModuleTitle = "Invoice List",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 8,
                            CategoryId = 3,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4998),
                            ModuleTitle = "Generate Invoice",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 9,
                            CategoryId = 4,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4998),
                            ModuleTitle = "Natality Reports",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 10,
                            CategoryId = 4,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4999),
                            ModuleTitle = "Invoice Reports",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 11,
                            CategoryId = 5,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5000),
                            ModuleTitle = "Profiles",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 12,
                            CategoryId = 5,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5001),
                            ModuleTitle = "Users",
                            StatusCode = "AC"
                        },
                        new
                        {
                            ModuleId = 13,
                            CategoryId = 5,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5001),
                            ModuleTitle = "Staff",
                            StatusCode = "AC"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Newborn", b =>
                {
                    b.Property<string>("NewbornID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("APGAR")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ChestCircumference")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateOnly?>("DateofBirth")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("DeliveryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FatherID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("HeadCircumference")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MidArmCircumference")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MidwifeID")
                        .HasColumnType("int");

                    b.Property<string>("MotherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NewbornCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("NewbornUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<int?>("PhysicianID")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal?>("Temp")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<TimeOnly?>("TimeofBirth")
                        .IsRequired()
                        .HasColumnType("time");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("NewbornID");

                    b.HasIndex("FatherID");

                    b.HasIndex("MidwifeID");

                    b.HasIndex("MotherID");

                    b.HasIndex("NewbornCreatedBy");

                    b.HasIndex("NewbornUpdatedBy");

                    b.HasIndex("PhysicianID");

                    b.HasIndex("StaffID");

                    b.HasIndex("StatusCode");

                    b.ToTable("Newborn");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.NewbornHearing", b =>
                {
                    b.Property<string>("HearingNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendingPractioner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BabyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("HearingCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("HearingResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HearingUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("NewbornID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateOnly?>("TestDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("HearingNo");

                    b.HasIndex("HearingCreatedBy");

                    b.HasIndex("HearingUpdatedBy");

                    b.HasIndex("NewbornID");

                    b.HasIndex("PatientID");

                    b.HasIndex("StatusCode");

                    b.ToTable("NewbornHearing");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.NewbornScreening", b =>
                {
                    b.Property<string>("ScreeningNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendingPractitioner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BabyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Courier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataSampleSent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfCollection")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateRegistration")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feeding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilterCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewbornID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceOfCollection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreeningCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("ScreeningResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreeningUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("Specimen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<TimeOnly?>("TimeOfCollection")
                        .HasColumnType("time");

                    b.Property<string>("TrackingNubmer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfSample")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("ScreeningNo");

                    b.HasIndex("NewbornID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ScreeningCreatedBy");

                    b.HasIndex("ScreeningUpdatedBy");

                    b.HasIndex("StatusCode");

                    b.ToTable("NewbornScreening");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.PatientPayments", b =>
                {
                    b.Property<int?>("PatientPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PatientPaymentID"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PaymentID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Payment_Method")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientPaymentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PatientPayments");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Patients", b =>
                {
                    b.Property<string>("PatientID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CivilStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Emergency_MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emergency_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPhilHealth")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PHIC_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("PatientUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpouseId")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("TeleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientID");

                    b.HasIndex("PatientCreatedBy");

                    b.HasIndex("PatientUpdatedBy");

                    b.HasIndex("SpouseId");

                    b.HasIndex("StatusCode");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientID = "PT0001",
                            Address = "Tipolo, Mandaue City Cebu ",
                            Birthdate = new DateOnly(1998, 1, 4),
                            BloodType = "O+",
                            CivilStatus = "single",
                            Created_At = new DateTime(2024, 2, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Emergency_MobileNumber = "09912356894",
                            Emergency_Name = "Mardelita Calma",
                            FirstName = "Erina",
                            Gender = "Female",
                            HasPhilHealth = false,
                            LastName = "Souma",
                            MiddleName = "Nakiri",
                            MobileNumber = "09317860939",
                            Occupation = "Fashion Designer",
                            PatientCreatedBy = "223e5845-f58c-493f-b6b4-46ff3b18a332",
                            PlaceOfBirth = "Bantayan Cebu City",
                            Religion = "Catholic",
                            SpouseId = 1,
                            StatusCode = "AC"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Payments", b =>
                {
                    b.Property<int?>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PaymentID"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PatientCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("Payment_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PhilHealth_Deduction")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Total_Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("PatientCreatedBy");

                    b.HasIndex("PatientID");

                    b.HasIndex("PatientUpdatedBy");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Prenatal", b =>
                {
                    b.Property<string>("CaseNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Abortion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EDC")
                        .HasColumnType("date");

                    b.Property<string>("Gravida")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HRCODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("LMP")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrenatalCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("PrenatalUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StillBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseNo");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrenatalCreatedBy");

                    b.HasIndex("PrenatalUpdatedBy");

                    b.HasIndex("StatusCode");

                    b.ToTable("Prenatal");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.PrenatalVisit", b =>
                {
                    b.Property<int>("PrenatalVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrenatalVisitID"));

                    b.Property<string>("AOGWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("FH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FHT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalAssessment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrenatalCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("PrenatalUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<string>("RR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrenatalVisitID");

                    b.HasIndex("CaseNo");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrenatalCreatedBy");

                    b.HasIndex("PrenatalUpdatedBy");

                    b.HasIndex("StatusCode");

                    b.ToTable("PrenatalVisit");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.RoleStaff", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleStaff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Midwife"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Physician"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "Nurse"
                        },
                        new
                        {
                            Id = 5,
                            RoleName = "Doctor"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Role_Access", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("OpenAccess")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("RoleId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Role_access");

                    b.HasData(
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 1,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5017),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 2,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5020),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 3,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5021),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 4,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5022),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 5,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5022),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 6,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5023),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 7,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5024),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 8,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5024),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 9,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5025),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 10,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5026),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 11,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5026),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 12,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5027),
                            OpenAccess = "Y"
                        },
                        new
                        {
                            RoleId = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            ModuleId = 13,
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(5028),
                            OpenAccess = "Y"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.ServicesPayment", b =>
                {
                    b.Property<int?>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ServiceID", "PaymentID");

                    b.HasIndex("PaymentID");

                    b.ToTable("ServicesPayments");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Servicesss", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Spouse", b =>
                {
                    b.Property<int>("SpouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpouseId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpouseId");

                    b.ToTable("Spouse");

                    b.HasData(
                        new
                        {
                            SpouseId = 1,
                            Address = "Tipolo, Mandaue City Cebu ",
                            Birthdate = new DateOnly(1899, 1, 4),
                            FirstName = "Yukihira",
                            Gender = "Female",
                            LastName = "Souma",
                            MiddleName = "Dela",
                            Occupation = "Enginneer"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Staff", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Shane",
                            LastName = "Cruz",
                            MiddleName = "Dela",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jane",
                            LastName = "Salvador",
                            MiddleName = "Salvi",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Liza",
                            LastName = "Ariesgado",
                            MiddleName = "Aries",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Status", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusCode");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusCode = "AC",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4954),
                            StatusName = "ACTIVE"
                        },
                        new
                        {
                            StatusCode = "IN",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4957),
                            StatusName = "INACTTIVE"
                        },
                        new
                        {
                            StatusCode = "DL",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4957),
                            StatusName = "DELETE"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StatusCode");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "223e5845-f58c-493f-b6b4-46ff3b18a332",
                            AccessFailedCount = 0,
                            Address = "Mabolo Cebu City",
                            Birthdate = new DateOnly(1952, 6, 7),
                            ConcurrencyStamp = "035ccf9c-2337-4575-99af-795fac9481cd",
                            Email = "lisa@paanakan.com",
                            EmailConfirmed = false,
                            FirstName = "lisa",
                            Gender = "Female",
                            LastName = "pdeuciano",
                            LockoutEnabled = true,
                            MiddleName = "valiz",
                            NormalizedEmail = "LISA@PAANAKAN.COM",
                            NormalizedUserName = "LISA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGyjgIyp14MszGz90Bkg/ySJenVsZL6A3jIS+/4y71OtVSvfM3TmPBf/I3ff0iGhqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RHHJPIOEKQH4HWQZLCOLOYY4E5RMLV2T",
                            StatusCode = "AC",
                            TwoFactorEnabled = false,
                            UserName = "lisa"
                        });
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleCreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Created_By");

                    b.Property<string>("RoleUpdatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Updated_By");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasIndex("RoleCreatedBy");

                    b.HasIndex("RoleUpdatedBy");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "18ab63db-22b1-4656-93e8-6240c08c988c",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Created_At = new DateTime(2024, 11, 14, 18, 23, 48, 719, DateTimeKind.Local).AddTicks(4914),
                            Description = "CRUD Anything",
                            RoleCreatedBy = "223e5845-f58c-493f-b6b4-46ff3b18a332"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Category", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Delivery", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("DLCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("DLUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusID");

                    b.HasOne("NatalCare.Models.Entities.Newborn", "Newborn")
                        .WithMany()
                        .HasForeignKey("NewbornID");

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("NatalCare.Models.Entities.Prenatal", "PrenatalCase")
                        .WithMany()
                        .HasForeignKey("PrenatalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Newborn");

                    b.Navigation("Patient");

                    b.Navigation("PrenatalCase");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.FamilyPlanning", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("FPCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("FPUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.ItemPayments", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Modules", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("Category");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Newborn", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Spouse", "Father")
                        .WithMany()
                        .HasForeignKey("FatherID");

                    b.HasOne("NatalCare.Models.Entities.Staff", "Midwife")
                        .WithMany()
                        .HasForeignKey("MidwifeID");

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("MotherID");

                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("NewbornCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("NewbornUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Staff", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianID");

                    b.HasOne("NatalCare.Models.Entities.Staff", "AssisstedBy")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("AssisstedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Father");

                    b.Navigation("Midwife");

                    b.Navigation("Patient");

                    b.Navigation("Physician");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.NewbornHearing", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("HearingCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("HearingUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Newborn", "Newborn")
                        .WithMany()
                        .HasForeignKey("NewbornID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Newborn");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.NewbornScreening", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Newborn", "Newborn")
                        .WithMany()
                        .HasForeignKey("NewbornID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("ScreeningCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("ScreeningUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Newborn");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.PatientPayments", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Payments", "Payments")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patients");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Patients", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("PatientCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("PatientUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Spouse", "Spouse")
                        .WithMany()
                        .HasForeignKey("SpouseId");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Spouse");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Payments", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("PatientCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("PatientUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Prenatal", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("PrenatalCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("PrenatalUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.PrenatalVisit", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Prenatal", "PrenatalCase")
                        .WithMany()
                        .HasForeignKey("CaseNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Patients", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("PrenatalCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("PrenatalUpdatedBy");

                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");

                    b.Navigation("PrenatalCase");

                    b.Navigation("Status");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Role_Access", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.ServicesPayment", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatalCare.Models.Entities.Servicesss", "Services")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Staff", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.RoleStaff", "RoleStaff")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleStaff");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.User", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NatalCare.Models.Entities.Role", b =>
                {
                    b.HasOne("NatalCare.Models.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("RoleCreatedBy");

                    b.HasOne("NatalCare.Models.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("RoleUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
